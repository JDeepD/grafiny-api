// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String     @unique
  password           String
  authorisationLevel AUTH_LEVEL @default(USER)
  profilePic         String     @default("")
  profile            Profile?
}

model Profile {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  user               User        @relation(fields: [userId], references: [id])
  userId             String      @unique @db.ObjectId
  scholarId          Int
  uploadedItems      Items[]     @relation("uploadeditems")
  uploadedItemIds    String[]
  institution        Institution @relation(fields: [instituteId], references: [id])
  instituteId        String      @db.ObjectId
  bookmarkedItems    Items[]     @relation("bookmarkeditems", fields: [bookmarkedItemsIds], references: [id])
  bookmarkedItemsIds String[]    @db.ObjectId
  likedItems         Items[]     @relation("likeditems", fields: [likedItemIds], references: [id])
  likedItemIds       String[]    @db.ObjectId
  year               YEAR

  @@unique([scholarId, instituteId])
}

model Institution {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  type        String?
  departments Department[]
  profile     Profile[]
}

model Department {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId //Incomplete Model
  name        String
  institution Institution @relation(fields: [instituteID], references: [id], onDelete: Restrict)
  instituteID String      @db.ObjectId
  semester    Semester[]

  @@unique([instituteID, name])
}

model Semester {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  semNumber    SEM
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Restrict)
  departmentId String     @db.ObjectId
  course       Course[]

  @@unique([id, departmentId])
}

model Course {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId //Incomplete
  name       String
  code       String
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Restrict)
  semesterId String   @db.ObjectId
  topic      Topic[]

  @@unique([semesterId, code])
}

model Topic {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId //Incomplete
  name     String
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Restrict)
  courseId String  @db.ObjectId
  items    Items[]

  @@unique([courseId, name])
}

model Items {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId //Incomplete Model
  name            String
  file            File[]
  uploadedAt      DateTime  @default(now())
  modifiedAt      DateTime  @updatedAt()
  profile         Profile   @relation("uploadeditems", fields: [profileId], references: [id], onDelete: NoAction)
  profileId       String    @db.ObjectId
  topic           Topic     @relation(fields: [topicId], references: [id], onDelete: Restrict)
  topicId         String    @db.ObjectId
  bookmarkedBy    Profile[] @relation("bookmarkeditems", fields: [bookmarkedByIds], references: [id])
  bookmarkedByIds String[]  @db.ObjectId
  likedBy         Profile[] @relation("likeditems", fields: [likedByIds], references: [id])
  likedByIds      String[]  @db.ObjectId
  createdAt       DateTime  @default(now())

  @@unique([topicId, name])
}

model File {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  url     String @unique
  key     String @unique
  item    Items  @relation(fields: [itemsId], references: [id], onDelete: Cascade)
  itemsId String @db.ObjectId
}

enum YEAR {
  FIRST
  SECOND
  THIRD
  FOURTH
}

enum SEM {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHTH
}

enum AUTH_LEVEL {
  USER
  ADMIN
  SUPERADMIN
}
